#!/bin/bash

# Process one directory worth of results, leaving SQL behind in results.sql

# SGE Parameters
## Name
#$ -N index_lidc

## working directory
#$ -cwd

## Array job, should be 1-1318
#$ -t 1-1318

## Export variables
#$ -V

## Logs -- to /dev/null
# -o /home/sgeadmin/logs/
#$ -j yes
#$ -e /dev/null
#$ -o /dev/null

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
# set -uo pipefail
IFS=$'\n\t'
shopt -s nullglob

# Index the data generated by processLIDC
# Substitute 1 if job is not set
export JOBID=${SGE_TASK_ID:=1}

# Some variables
if [ `uname` = 'Linux' ]; then

    # Linux paths
    export JAVA_HOME=/software/jvm/jdk1.8.0_20
    export PATH=$PATH:$JAVA_HOME/bin:/software/bin:/software/python
    export LD_LIBRARY_PATH=/software/lib
    export JAVA_OPTS="-Xmx2g"
    # Python Virtual env
    source /software/lidc-venv/bin/activate

    # Get the XML file to run
    XMLORIG=/software/$(sed "${JOBID}q;d" /software/lidc.txt)
    algorithm_dir=/software/algorithms
else
    # Mac path
    PATH=`pwd`/build/install/LIDCTooling/bin:$PATH
    PATH=`pwd`/../ChestImagingPlatform/build/CIP-build/bin/:`pwd`/python/:${PATH}
    XMLORIG=`pwd`/ClusterSoftware/$(sed "${JOBID}q;d" `pwd`/ClusterSoftware/lidc.txt)
fi

# in 'main' we can reference functions later in the script
main() {
    setup
    ## The XML file to process
    SeriesInstanceUID=$(extract SeriesInstanceUID $XMLORIG)
    dir=`pwd`/segmented/$SeriesInstanceUID
    echo Processing in $dir into results.sql

    echo "" > $dir/results.sql
    
    wd=$(pwd)
    
    cd $wd
    indexRead $dir
    cd $wd
    indexFeatures $dir
    cd $wd
    indexMeasures $dir
    cd $wd
    captureErrors $dir
}


function indexMeasures {
    dir=$1
    cd $dir
    # Process all the measures
    printf "Measures"
    for fid in *_measures.json; do
        printf "."
        uid=$(jq -r '"\(.algorithm)-\(.nodule_uid)"' $fid)
        getValues $fid . $uid measures
        getValues $fid .measures $uid measures
        cat >> results.sql <<EOF
update measures set path = '$dir' where uid = '$uid';
EOF
    done
    printf "\n"
}

function indexRead {
    dir=$1
    cd $dir
    if [[ ! -f reads.json ]]; then
        # see http://stackoverflow.com/a/23550347/334619
        (>&2 printf "reads.json does not exist, exiting")
        exit 1
    fi
    getValues reads.json . $(jq -r .uid reads.json) series

    for read_id in $(jq -r ".reads[].id" reads.json); do
        read_uid=$(jq -r ".reads[] | select(.id == $read_id) | .uid" reads.json)
        echo Read: $read_id uid $read_uid
        getValues reads.json ".reads[] | select(.id == $read_id)" $read_uid reads
        printf "Nodules"
        for nodule_id in $(jq -r ".reads[] | select(.uid == \"$read_uid\") | .nodules[].id" reads.json); do
            # printf "%s\n" "Processing Nodule: $nodule_uid"
            printf "."
            jq ".reads[].nodules[] | select ( .id == \"$nodule_id\" )" reads.json > nodule.json
            nodule_uid=$(jq -r .uid nodule.json)
            getValues nodule.json . $nodule_uid nodules
            getValues nodule.json .characteristics $nodule_uid nodules
            cat >> results.sql <<EOF
 update nodules set read_uid = '$read_uid' where uid = '$nodule_uid';
EOF
            #         nodule_uid=$(echo $nodule | jq -r ".uid")
        done
        printf "\n"
    done

}

function indexFeatures {
    local dir=$1
    cd $dir
    printf "Features"
    for fid in *_features.json; do
        printf "."
        local uid=$(jq -r '"\(.algorithm)-\(.nodule_uid)"' $fid)
        getValues $fid . $uid features
        getValues $fid ".first_order, .glcm, .glszm, .rlgl, .shape" $uid features
    done
    printf "\n"
}


function captureErrors {
    dir=$1
    cd $dir
    length=$(jq -r '.errors | length' error.json)
    echo Processing $length errors in $dir
    ((length = length - 1))
    # length=$(echo $((length--)))
    for i in `seq 0 $length`; do
        uid=$(uuidgen)
        getValues error.json ".errors[$i]" $uid errors
        p=$(jq -r ".errors[$i].log" error.json)
        cat >> results.sql <<EOF
update errors set path = '$dir/$p' where uid = '$uid';
EOF
    done
}

# Take a json file, JSON path, uid, and table to insert values into
function getValues {
    local file=$1
    local path=$2
    local uid=$3
    local table=$4

    # bop out if table is empty
    if [[ $table == '' ]]; then
        return
    fi
    
    # echo $file $path $uid $table
    cat >> results.sql <<EOF
insert or ignore into $table ( uid ) values ( '$uid' );
EOF
    local sql=""
    # Get all the keys, but ignore keys named "uid"
    for key in $(jq -r "$path | keys | .[]" $file); do
        if [[ $tableinfo == *${key}* ]] && [[ $key != "uid" ]]; then
            local value=$(jq -r "$path | .[\"$key\"] // \"\" " $file | sed "s/'/''/g")
            sql+="update or ignore $table set $key = '$value' where uid = '$uid'; "
        fi
    done
    echo $sql >> results.sql
}

function setup {
    tableinfo="nodule_uid read_uid path algorithm command_line false_negative_error dice_coefficient volume_similarity false_positive_error mean_overlap union_overlap jaccard_coefficient hausdorff_distance average_hausdorff_distance read_uid normalized_nodule_id id centroid centroidLPS point_count label_value subtlety internalStructure calcification sphericity margin lobulation spiculation texture malignancy filename id series_instance_uid study_instance_uid patient_name patient_id manufacturer manufacturer_model_name patient_sex patient_age ethnic_group contrast_bolus_agent body_part_examined scan_options slice_thickness kvp data_collection_diameter software_versions reconstruction_diameter gantry_detector_tilt table_height rotation_direction exposure_time xray_tube_current exposure convolution_kernel patient_position image_position_patient image_orientation_patient filename path name log text nodule_uid read_uid algorithm LoG_sigma_05_Energy LoG_sigma_05_Entropy LoG_sigma_05_Kurtosis LoG_sigma_05_Maximum LoG_sigma_05_Mean LoG_sigma_05_MeanDeviation LoG_sigma_05_Median LoG_sigma_05_Minimum LoG_sigma_05_Range LoG_sigma_05_RootMeanSquared LoG_sigma_05_Skewness LoG_sigma_05_StandardDeviation LoG_sigma_05_TotalEnergy LoG_sigma_05_Uniformity LoG_sigma_05_Variance LoG_sigma_10_Energy LoG_sigma_10_Entropy LoG_sigma_10_Kurtosis LoG_sigma_10_Maximum LoG_sigma_10_Mean LoG_sigma_10_MeanDeviation LoG_sigma_10_Median LoG_sigma_10_Minimum LoG_sigma_10_Range LoG_sigma_10_RootMeanSquared LoG_sigma_10_Skewness LoG_sigma_10_StandardDeviation LoG_sigma_10_TotalEnergy LoG_sigma_10_Uniformity LoG_sigma_10_Variance LoG_sigma_15_Energy LoG_sigma_15_Entropy LoG_sigma_15_Kurtosis LoG_sigma_15_Maximum LoG_sigma_15_Mean LoG_sigma_15_MeanDeviation LoG_sigma_15_Median LoG_sigma_15_Minimum LoG_sigma_15_Range LoG_sigma_15_RootMeanSquared LoG_sigma_15_Skewness LoG_sigma_15_StandardDeviation LoG_sigma_15_TotalEnergy LoG_sigma_15_Uniformity LoG_sigma_15_Variance LoG_sigma_20_Energy LoG_sigma_20_Entropy LoG_sigma_20_Kurtosis LoG_sigma_20_Maximum LoG_sigma_20_Mean LoG_sigma_20_MeanDeviation LoG_sigma_20_Median LoG_sigma_20_Minimum LoG_sigma_20_Range LoG_sigma_20_RootMeanSquared LoG_sigma_20_Skewness LoG_sigma_20_StandardDeviation LoG_sigma_20_TotalEnergy LoG_sigma_20_Uniformity LoG_sigma_20_Variance LoG_sigma_25_Energy LoG_sigma_25_Entropy LoG_sigma_25_Kurtosis LoG_sigma_25_Maximum LoG_sigma_25_Mean LoG_sigma_25_MeanDeviation LoG_sigma_25_Median LoG_sigma_25_Minimum LoG_sigma_25_Range LoG_sigma_25_RootMeanSquared LoG_sigma_25_Skewness LoG_sigma_25_StandardDeviation LoG_sigma_25_TotalEnergy LoG_sigma_25_Uniformity LoG_sigma_25_Variance LoG_sigma_30_Energy LoG_sigma_30_Entropy LoG_sigma_30_Kurtosis LoG_sigma_30_Maximum LoG_sigma_30_Mean LoG_sigma_30_MeanDeviation LoG_sigma_30_Median LoG_sigma_30_Minimum LoG_sigma_30_Range LoG_sigma_30_RootMeanSquared LoG_sigma_30_Skewness LoG_sigma_30_StandardDeviation LoG_sigma_30_TotalEnergy LoG_sigma_30_Uniformity LoG_sigma_30_Variance LoG_sigma_35_Energy LoG_sigma_35_Entropy LoG_sigma_35_Kurtosis LoG_sigma_35_Maximum LoG_sigma_35_Mean LoG_sigma_35_MeanDeviation LoG_sigma_35_Median LoG_sigma_35_Minimum LoG_sigma_35_Range LoG_sigma_35_RootMeanSquared LoG_sigma_35_Skewness LoG_sigma_35_StandardDeviation LoG_sigma_35_TotalEnergy LoG_sigma_35_Uniformity LoG_sigma_35_Variance LoG_sigma_40_Energy LoG_sigma_40_Entropy LoG_sigma_40_Kurtosis LoG_sigma_40_Maximum LoG_sigma_40_Mean LoG_sigma_40_MeanDeviation LoG_sigma_40_Median LoG_sigma_40_Minimum LoG_sigma_40_Range LoG_sigma_40_RootMeanSquared LoG_sigma_40_Skewness LoG_sigma_40_StandardDeviation LoG_sigma_40_TotalEnergy LoG_sigma_40_Uniformity LoG_sigma_40_Variance LoG_sigma_45_Energy LoG_sigma_45_Entropy LoG_sigma_45_Kurtosis LoG_sigma_45_Maximum LoG_sigma_45_Mean LoG_sigma_45_MeanDeviation LoG_sigma_45_Median LoG_sigma_45_Minimum LoG_sigma_45_Range LoG_sigma_45_RootMeanSquared LoG_sigma_45_Skewness LoG_sigma_45_StandardDeviation LoG_sigma_45_TotalEnergy LoG_sigma_45_Uniformity LoG_sigma_45_Variance LoG_sigma_50_Energy LoG_sigma_50_Entropy LoG_sigma_50_Kurtosis LoG_sigma_50_Maximum LoG_sigma_50_Mean LoG_sigma_50_MeanDeviation LoG_sigma_50_Median LoG_sigma_50_Minimum LoG_sigma_50_Range LoG_sigma_50_RootMeanSquared LoG_sigma_50_Skewness LoG_sigma_50_StandardDeviation LoG_sigma_50_TotalEnergy LoG_sigma_50_Uniformity LoG_sigma_50_Variance Mean Autocorrelation ClusterProminence ClusterShade ClusterTendency Contrast Correlation DifferenceEntropy Dissimilarity Energy Entropy Homogeneity1 Homogeneity2 Idmn Idn Imc1 Imc2 InverseVariance MaximumProbability SumAverage SumEntropy SumSquares SumSquares2 SumVariance SumVariance2 HighIntensityEmphasis HighIntensityLargeAreaEmphasis HighIntensitySmallAreaEmphasis IntensityVariability LargeAreaEmphasis LowIntensityEmphasis LowIntensityLargeAreaEmphasis LowIntensitySmallAreaEmphasis SizeZoneVariability SmallAreaEmphasis ZonePercentage GrayLevelNonUniformity HighGrayLevelRunEmphasis LongRunEmphasis LongRunHighGrayLevelEmphasis LongRunLowGrayLevelEmphasis LowGrayLevelRunEmphasis RunLengthNonUniformity RunPercentage ShortRunEmphasis ShortRunHighGrayLevelEmphasis ShortRunLowGrayLevelEmphasis Compactness1 Compactness2 Maximum3DDiameter SphericalDisproportion Sphericity SurfaceArea SurfaceVolumeRatio Volume"
}

main "$@"
