#!/usr/bin/env python
# Evaluate lung nodule segmentation

# Execute your algorithm and save to $output_path/tag$suffix
# /software/python/staple --label $label_value --ignore `basename $ground_truth` --output $output_path $segmentation_path/read*.nii.gz


usage = """
Usage:
 staple.py [options] input cx cy cz output
 options:
    --label <value>          -- label of nodule
    --output <filename>      -- output filename
    --dicom path             -- path to dicom directory
    --read read              -- read number
    --nodule nodule          -- nodule number
    --segmentation_path path -- path to segmentation directory
    --ground_truth path      -- path to ground truth NIfTI
    --label label            -- label_value of ground truth voxel

 args:
    input -- input volume
    cx cy cz -- seed point
    output  -- output volume
"""

import getopt
import SimpleITK as sitk
import sys,os,json
import glob,os.path


# Parse 
opts,args = getopt.getopt(sys.argv[1:], "", longopts=["label_value=","dicom=","read=","nodule=","segmentation_path=","ground_truth=","output="])

if len(args) < 1:
    print usage
    sys.exit(1)

settings = { "--label_value": '1', '--output': '', '--ground_truth': '', '--segmentation_path': ''}
settings.update ( opts )
output_filename = args[4]
if output_filename == None:
    print ( 'Output filename must be set')
    print usage
    sys.exit(1)

ignore = os.path.basename(settings["--ground_truth"])
g = settings['--segmentation_path'] + "/read*.nii.gz"
print ( "looking for " + g )
reads = glob.glob(g)
# Load the input images
inputs = []
for f in reads:
    if f.find(ignore) != -1:
       continue
    print("Loading " + f)
    inputs.append ( sitk.ReadImage(f) )

if len(inputs) < 2:
    print ( "STAPLE requires more than 2 inputs!" )
    exit 1
    
staple = sitk.STAPLEImageFilter()
staple.SetForegroundValue ( float(settings["--label_value"]) )
staple_output = staple.Execute ( *inputs )

threshold = sitk.BinaryThresholdImageFilter()
threshold.SetLowerThreshold(0.9)
threshold.SetUpperThreshold(10e5)
threshold.SetInsideValue(int(settings["--label_value"]))
output = threshold.Execute(staple_output)

print ( "writing " + output_filename)

sitk.WriteImage(output, output_filename, True)

