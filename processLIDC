#!/bin/bash
# SGE Parameters

## Name
#$ -N lidc

## working directory
#$ -cwd

## Array job, should be 1-1318
#$ -t 1-1318

## Export variables
#$ -V

## Logs -- to /dev/null
# -o /home/sgeadmin/logs/
#$ -j yes
#$ -e /dev/null
#$ -o /dev/null

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
# set -uo pipefail
IFS=$'\n\t'

# This script will download DICOM from LIDC, extract the radiologists'
# segmentations, run the algorithms and compute the radiomics features.

algorithm_dir=`pwd`/algorithms
XMLORIG=`pwd`/ClusterSoftware/tcia-lidc-xml/157/158.xml
# Substitute 1 if job is not set
export JOBID=${SGE_TASK_ID:=1}

# Some variables
if [ `uname` = 'Linux' ]; then

    # Linux paths
    export JAVA_HOME=/software/jvm/jdk1.8.0_20
    export PATH=$JAVA_HOME/bin:/software/bin:/software/python:$PATH
    export LD_LIBRARY_PATH=/software/lib
    export JAVA_OPTS="-Xmx2g"
    # Python Virtual env
    source /software/lidc-venv/bin/activate

    # Get the XML file to run
    XMLORIG=/software/$(sed "${JOBID}q;d" /software/lidc.txt)
    algorithm_dir=/software/algorithms
    CLEANUP=1
    DICOM_PREFIX=/tmp
else
    # Mac path
    PATH=`pwd`/build/install/LIDCTooling/bin:$PATH
    PATH=`pwd`/../ChestImagingPlatform/build/CIP-build/bin/:`pwd`/python/:${PATH}
    XMLORIG=`pwd`/ClusterSoftware/$(sed "${JOBID}q;d" `pwd`/ClusterSoftware/lidc.txt)
    CLEANUP=0
    DICOM_PREFIX=`pwd`
fi

# Color info from http://stackoverflow.com/a/5413029/334619
blue_text=$(tput setaf 4)
red_text=$(tput setaf 1)
normal_text=$(tput sgr0)

# Cleanup code
function cleanup {
    if [[ $CLEANUP == 1 ]]; then
        printf 'Deleting DICOM:\n%s\n' $dicom_dir
        rm -rf $dicom_dir
    fi        
}
trap cleanup EXIT

## The XML file to process
SeriesInstanceUID=$(extract SeriesInstanceUID $XMLORIG)

dicom_dir=$DICOM_PREFIX/dicom/$SeriesInstanceUID
dir=`pwd`/segmented/$SeriesInstanceUID

echo Processing in $dir

## Download from LIDC
APIKey="864dcc73-ce40-4f19-8a3e-fce71fc2dba2"
baseURL="https://services.cancerimagingarchive.net/services/v3/TCIA"

mkdir -p $dir $dir/log
cd $dir
touch failed.txt
printf '{ "errors" : [] }' > error.json

function writeError {
    name=$1
    log=$2
    jq \
        --arg name "$name" \
        --arg log "log/$log" \
        --arg text "$(jq -rRs . log/$log)" \
        '.errors += [{"name":$name, "log":$log, "text":$text}]' error.json > error.temp.json
    cp error.temp.json error.json
}

# Get the XML file
XML=`basename $XMLORIG`
if [[ ! -f $XML ]]; then
   cp $XMLORIG .
fi

# Get the images from TCIA
if [[ ! -d $dicom_dir ]]; then
    printf "Download DICOM from TCIA:\n%s\n" $dicom_dir
    mkdir -p $dicom_dir

    zip=$(mktemp -t imagesXXXX).zip
    
    curl --silent -o $zip  -H "api_key: $APIKey" "$baseURL/query/getImage?SeriesInstanceUID=$SeriesInstanceUID&api_key=$APIKey"
    echo curl --silent -o $zip  -H "api_key: $APIKey" "$baseURL/query/getImage?SeriesInstanceUID=$SeriesInstanceUID&api_key=$APIKey"
    unzip -o -q $zip -d $dicom_dir
    rm -f $zip
fi

if [[ ! -f reads.json ]]; then
    printf "Segmenting DICOM:\n%s\n" $dicom_dir
    extract segment $XML $dicom_dir .
fi

function processSegmentation {
    
        measures=${algorithm_name}${tag}_measures.json
        printf "%-50.50s" "    Evaluate Segmentation"
        (set -x; evaluateSegmentation \
                     --label $label_value \
                     --cli "$cli" \
                     --nodule_uid "$nodule_uid" \
                     --read_uid "$read_uid" \
                     --measure_uid "$measure_uid" \
                     --algorithm "${algorithm_name}" \
                     ${algorithm_name}${suffix} \
                     ${ground_truth} \
                     ${measures}) > log/${algorithm_name}${tag}_evaluate.log 2>&1
        if [[ $? -eq 0 ]]; then
            printf "%s\n" " ... Passed"
        else
            printf "%s\n" " ... ${red_text}FAILED${normal_text}"
            writeError "${algorithm_name}${tag}_measures" "${algorithm_name}${tag}_measures.log"
        fi

        printf "%-50.50s" "    Evaluate Features"
        features=${algorithm_name}${tag}_features.json
        (set -x; computeRadiomics \
                     --nodule_uid "$nodule_uid" \
                     --read_uid "$read_uid" \
                     --algorithm "${algorithm_name}" \
                     --label $label_value \
                     image.nii.gz \
                     ${algorithm_name}${suffix} \
                     ${features}) > log/${algorithm_name}${tag}_features.log 2>&1
        if [[ $? -eq 0 ]]; then
            printf "%s\n" " ... Passed"
        else
            printf "%s\n" " ... ${red_text}FAILED${normal_text}"
            writeError "${algorithm_name}${tag}_features" "${algorithm_name}${tag}_features.log"
        fi
}

if [[ ! -f reads.json ]]; then
    (>&2 printf "reads.json does not exist, exiting\n")
    exit 1
fi

for read_id in $(jq -r ".reads[].id" reads.json); do
    read=$(jq ".reads[] | select(.id == $read_id)" reads.json)
    read_uid=$(echo $read | jq -r ".uid")
    # loop over the nodules
    for nodule_id in $(echo $read | jq -r ".nodules[].id"); do
        nodule=$(echo $read | jq ".nodules[] | select ( .id == \"$nodule_id\" )")
        nodule_uid=$(echo $nodule | jq -r ".uid")
        normalized_nodule_id=$(echo $nodule | jq -r ".normalized_nodule_id")
        label_value=$(echo $nodule | jq -r ".label_value")
        centroid_x=$(echo $nodule | jq -r ".centroidLPS[0]")
        centroid_y=$(echo $nodule | jq -r ".centroidLPS[1]")
        centroid_z=$(echo $nodule | jq -r ".centroidLPS[2]")

        # Ground truth
        ground_truth=read_${read_id}.nii.gz
        tag=_read_${read_id}_nodule_${normalized_nodule_id}
        suffix=${tag}.nii.gz

        printf "Processing Read: $read_id -- Normalized Nodule: $normalized_nodule_id ($nodule_id)\n"

        # Compare against the other readers
        for other_read_id in $(jq -r ".reads[] | select ( .id != $read_id ) | .id" reads.json); do
            # See if the other read has a normalized nodule id
            for other_nodule_id in $(jq -r ".reads[] | select ( .id == $other_read_id ) | .nodules[] | select ( .normalized_nodule_id == $normalized_nodule_id) | .normalized_nodule_id " reads.json); do
                # Extract the right segmentation from the other
                printf "%-50.50s" "  Manual segmentation read $other_read_id"
                algorithm_name=Manual_$other_read_id
                measure_uid=${nodule_uid}-${algorithm_name}
                cli="read_$other_read_id.nii.gz $label_value ${algorithm_name}${suffix}"
                (set -x; manualSegmentation \
                      read_$other_read_id.nii.gz $label_value ${algorithm_name}${suffix}
                ) > log/${algorithm_name}${tag}.log 2>&1
                if [[ $? -eq 0 ]]; then
                    printf " ... Passed\n"
                    # Evaluate and run the radiomics
                    processSegmentation
                else
                    printf " ... ${red_text}FAILED${normal_text}\n"
                    writeError "${algorithm_name}${tag}" "${algorithm_name}${tag}.log"
                fi
            done
        done

        for algorithm in $algorithm_dir/*; do
            algorithm_name=$(basename $algorithm)
            printf "%-50.50s" "  Executing $algorithm_name"
            (set -x; $algorithm \
                --dicom $dicom_dir \
                --read $read_id \
                --nodule $normalized_nodule_id \
                --segmentation_path `pwd` \
                --ground_truth $ground_truth \
                --label_value $label_value \
                $dir/image.nii.gz \
                $centroid_x $centroid_y $centroid_z \
                ${algorithm_name}${suffix}) > log/${algorithm_name}${tag}.log 2>&1
            if [[ $? -eq 0 ]]; then
                printf " ... Passed\n"
                cli="$algorithm --dicom $dicom_dir --read $read_id --nodule $normalized_nodule_id --segmentation_path `pwd` --ground_truth $ground_truth --label_value $label_value $dir/image.nii.gz $centroid_x $centroid_y $centroid_z ${algorithm_name}${suffix}"
                measure_uid=${nodule_uid}-${algorithm_name}
                # Evaluate and run the radiomics
                processSegmentation
            else
                printf " ... ${red_text}FAILED${normal_text}\n"
                writeError "${algorithm_name}${tag}" "${algorithm_name}${tag}.log"
            fi
        done
    done
done

gzip $dir/log/*
touch finished



